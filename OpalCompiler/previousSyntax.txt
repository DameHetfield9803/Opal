// Subtraction
/*static int minus(const std::vector<int>& operands) {
    if (operands.empty()) {
        // Handle the case where there are no operands.
        // You can choose to throw an exception or return a default value.
        // Here, we'll return 0 as the default value.
        return 0;
    }
    int result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        result -= operands[i];
    }
    return result;
}
static double minus(const std::vector<double>& operands) {
    if (operands.empty()) {
        // Handle the case where there are no operands.
        // You can choose to throw an exception or return a default value.
        // Here, we'll return 0 as the default value.
        return 0;
    }
    double result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        result -= operands[i];
    }
    return result;
}
static float minus(const std::vector<float>& operands) {
    if (operands.empty()) {
        // Handle the case where there are no operands.
        // You can choose to throw an exception or return a default value.
        // Here, we'll return 0 as the default value.
        return 0;
    }
    float result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        result -= operands[i];
    }
    return result;
}
static long minus(const std::vector<long>& operands) {
    if (operands.empty()) {
        // Handle the case where there are no operands.
        // You can choose to throw an exception or return a default value.
        // Here, we'll return 0 as the default value.
        return 0;
    }
    long result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        result -= operands[i];
    }
    return result;
}*/

// Division
/*static double divide(const std::vector<double>& operands) {
    if (operands.empty()) {
        throw std::runtime_error("Division operator requires at least one operand.");
    }
    double result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        if (operands[i] == 0) {
            throw std::runtime_error("Division by zero error.");
        }
        result /= operands[i];
    }
    return result;
}

static int divide(const std::vector<int>& operands) {
    if (operands.empty()) {
        throw std::runtime_error("Division operator requires at least one operand.");
    }
    int result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        if (operands[i] == 0) {
            throw std::runtime_error("Division by zero error.");
        }
        result /= operands[i];
    }
    return result;
}

static float divide(const std::vector<float>& operands) {
    if (operands.empty()) {
        throw std::runtime_error("Division operator requires at least one operand.");
    }
    float result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        if (operands[i] == 0) {
            throw std::runtime_error("Division by zero error.");
        }
        result /= operands[i];
    }
    return result;
}

static long divide(const std::vector<long>& operands) {
    if (operands.empty()) {
        throw std::runtime_error("Division operator requires at least one operand.");
    }
    long result = operands[0];
    for (size_t i = 1; i < operands.size(); ++i) {
        if (operands[i] == 0) {
            throw std::runtime_error("Division by zero error.");
        }
        result /= operands[i];
    }
    return result;
}*/

// Multiplication
/*static double multiply(const std::vector<double>& operands) {
    double result = 0.0;
    for (double operand : operands) {
        result *= operand;
    }
    return result;
}
static int multiply(const std::vector<int>& operands) {
    int result = 0;
    for (int operand : operands) {
        result *= operand;
    }
    return result;
}
static float multiply(const std::vector<float>& operands) {
    float result = 0.0;
    for (float operand : operands) {
        result *= operand;
    }
    return result;
}
static long multiply(const std::vector<long>& operands) {
    long result = 0.0;
    for (long operand : operands) {
        result *= operand;
    }
    return result;
}*/

// Math operations 
// Addition
/*static double add(const std::vector<double>& operands) {
    double result = 0.0;
    for (double operand : operands) {
        result += operand;
    }
    return result;
}
static int add(const std::vector<int>& operands) {
    int result = 0;
    for (int operand : operands) {
        result += operand;
    }
    return result;
}
static float add(const std::vector<float>& operands) {
    float result = 0.0;
    for (float operand : operands) {
        result += operand;
    }
    return result;
}
static long add(const std::vector<long>& operands) {
    long result = 0.0;
    for (long operand : operands) {
        result += operand;
    }
    return result;
}*/

// basically print() in Python
// string echo(string x){
//   std::cout << x; 
// }

// Added exception handling - Kevin
// Empty string isn't allowed
// const std::string& x
/*static std::string echo(std::string x) {
    if (x.empty()) {
        throw std::invalid_argument("Error: empty string isn't allowed");
    }
    try {
        std::cout << x;
    }
    catch (const std::exception& e) {
        throw std::runtime_error("Error occurred during output: " + std::string(e.what()));
    }
    std::cout << x;
    return x;
}

static int echo(int i) {
    std::cout << i;
    return i;
}
static char echo(char j) {
    std::cout << j;
    return j;
}

static double echo(double a) {
    std::cout << a;
    return a;
}

static float echo(float b) {
    std::cout << b;
    return b;
}

static long echo(long c) {
    std::cout << c;
    return c;
}

static bool echo(bool d) {
    if (d == true) {
        std::cout << true;
    }
    else {
        std::cout << false;
    }
    return d;
}*/
